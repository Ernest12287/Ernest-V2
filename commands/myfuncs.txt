// myfunc.js - Custom utility functions for the YouTube downloader

// Import the built-in https module for making HTTP requests
import https from 'https'
// Import the built-in http module for HTTP requests (in case of non-SSL URLs)
import http from 'http'

/**
 * Downloads an image from a URL and returns it as a buffer
 * This function is used to download album artwork/thumbnails for embedding in MP3 files
 * @param {string} url - The URL of the image to download
 * @returns {Promise<{buffer: Buffer}>} - Promise that resolves to an object containing the image buffer
 */
export const fetchBuffer = (url) => {
    return new Promise((resolve, reject) => {
        // Determine which module to use based on URL protocol
        const client = url.startsWith('https') ? https : http;
        
        // Make HTTP request to download the image
        const request = client.get(url, (response) => {
            // Check if the response is successful (status code 200)
            if (response.statusCode !== 200) {
                reject(new Error(`Failed to fetch image: HTTP ${response.statusCode}`));
                return;
            }
            
            // Array to store chunks of data as they arrive
            const chunks = [];
            
            // Collect data chunks as they arrive
            response.on('data', (chunk) => {
                chunks.push(chunk);
            });
            
            // When all data has been received
            response.on('end', () => {
                // Combine all chunks into a single buffer
                const buffer = Buffer.concat(chunks);
                // Resolve with the buffer wrapped in an object (matching expected format)
                resolve({ buffer });
            });
            
            // Handle response errors
            response.on('error', (error) => {
                reject(new Error(`Error downloading image: ${error.message}`));
            });
        });
        
        // Handle request errors (connection issues, etc.)
        request.on('error', (error) => {
            reject(new Error(`Request error: ${error.message}`));
        });
        
        // Set a timeout to prevent hanging requests
        request.setTimeout(10000, () => {
            request.destroy();
            reject(new Error('Request timeout: Image download took too long'));
        });
    });
};

// Alternative implementation using node-fetch (if you prefer to use fetch)
// You would need to install: npm install node-fetch
/*
import fetch from 'node-fetch';

export const fetchBuffer = async (url) => {
    try {
        // Make HTTP request using fetch
        const response = await fetch(url);
        
        // Check if response is successful
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        // Convert response to buffer
        const buffer = await response.buffer();
        
        // Return in expected format
        return { buffer };
    } catch (error) {
        throw new Error(`Failed to fetch image: ${error.message}`);
    }
};
*/

// Alternative implementation using axios (if you prefer axios)
// You would need to install: npm install axios
/*
import axios from 'axios';

export const fetchBuffer = async (url) => {
    try {
        // Make HTTP request with axios, requesting response as arraybuffer
        const response = await axios.get(url, {
            responseType: 'arraybuffer',
            timeout: 10000 // 10 second timeout
        });
        
        // Convert arraybuffer to Buffer
        const buffer = Buffer.from(response.data);
        
        // Return in expected format
        return { buffer };
    } catch (error) {
        throw new Error(`Failed to fetch image: ${error.message}`);
    }
};
*/