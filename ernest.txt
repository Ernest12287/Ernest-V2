import {
  makeWASocket,
  useMultiFileAuthState,
  DisconnectReason,
  Browsers,
} from "@whiskeysockets/baileys";
import pino from "pino";
import fs from "fs/promises";
import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import { messageHandler } from "./handlers/messageHandler.js";
import express from "express";
import { initScheduler } from './lib/scheduler.js';
// import pkg from './commands/antidelete.js';
// const { handleAntiDelete, messageStorage } = pkg;


// Configure environment
dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration
const config = {
  AUTH_FOLDER: join(__dirname, "data", "auth_state"),
  LOG_FILE: join(__dirname, "bot.log"),
  MAX_RETRIES: 5,
  RETRY_DELAY: 5000,
  PORT: process.env.PORT || 3000,
  BOT_VERSION: "2.2.0" // Updated version
};

// Ensure auth directory exists
async function ensureAuthFolder() {
  try {
    await fs.mkdir(config.AUTH_FOLDER, { recursive: true });
    // Also ensure data directory for messages
    await fs.mkdir(join(__dirname, "data"), { recursive: true });
  } catch (err) {
    console.error("Failed to create directories:", err);
    process.exit(1);
  }
}

// Logger setup
const logger = pino({
  level: "debug",
  transport: {
    target: "pino-pretty",
    options: {
      colorize: true,
      translateTime: "SYS:standard",
      ignore: "pid,hostname",
    },
  },
});

// Session management
async function initializeSession() {
  if (!process.env.WHATSAPP_SESSION) {
    throw new Error("WHATSAPP_SESSION environment variable not set");
  }

  try {
    const decoded = Buffer.from(process.env.WHATSAPP_SESSION, "base64").toString("utf-8");
    const session = JSON.parse(decoded);
    const credsPath = join(config.AUTH_FOLDER, "creds.json");
    
    await fs.writeFile(credsPath, JSON.stringify(session, null, 2));
    logger.info("Session initialized from environment variable");
    
    return true;
  } catch (err) {
    logger.error("Session initialization failed:", err);
    throw err;
  }
}

// WhatsApp Bot Class
class WhatsAppBot {
  constructor() {
    this.sock = null;
    this.retryCount = 0;
    this.afkUsers = new Map();
    this.app = express();
    this.messageCount = 0;
    this.startTime = Date.now();
  }

  async start() {
    try {
      await ensureAuthFolder();
      await initializeSession();
      
      this.setupExpressServer();
      await this.connectWhatsApp();
      
    } catch (err) {
      logger.error("Bot startup failed:", err);
      await this.handleRetry();
    }
  }

  setupExpressServer() {
    // Health check endpoint
    this.app.get("/health", (req, res) => {
      res.status(200).json({
        status: "running",
        connected: !!this.sock,
        uptime: Date.now() - this.startTime,
        messagesProcessed: this.messageCount,
        antiDeleteEnabled: process.env.ANTI_DELETE_ENABLED === 'true'
      });
    });

    // Anti-delete stats endpoint (for debugging)
    this.app.get("/antidelete/stats", (req, res) => {
      if (!messageStorage.isInitialized) {
        return res.status(503).json({ error: "Storage not initialized" });
      }
      
      res.json({
        messagesStored: messageStorage.messages.size,
        isEnabled: process.env.ANTI_DELETE_ENABLED === 'true',
        retentionTime: "30 minutes"
      });
    });

    this.app.listen(config.PORT, () => {
      logger.info(`🌐 Health server running on port ${config.PORT}`);
    });
  }

  async connectWhatsApp() {
    const { state, saveCreds } = await useMultiFileAuthState(config.AUTH_FOLDER);
    
    this.sock = makeWASocket({
      auth: state,
      logger: pino({ level: "silent" }),
      browser: Browsers.macOS("Desktop"),
      printQRInTerminal: false,
      shouldSyncHistoryMessage: () => false,
      syncFullHistory: false,
      markOnlineOnConnect: true
    });

    // Setup event handlers
    this.setupEventHandlers(saveCreds);
    
    // Initialize message handler
    messageHandler(this.sock, this.afkUsers);
    
    // Initialize scheduler
    initScheduler(this.sock);

    logger.info("WhatsApp connection initialized");
  }

  setupEventHandlers(saveCreds) {
    // Connection updates
    this.sock.ev.on("connection.update", async (update) => {
      logger.debug("Connection update:", update);
      
      if (update.connection === "close") {
        await this.handleDisconnection(update.lastDisconnect);
      }

      if (update.connection === "open") {
        await this.handleSuccessfulConnection();
      }
    });

    // Credentials updates
    this.sock.ev.on("creds.update", saveCreds);

    // ANTI-DELETE MESSAGE HANDLER - This is the key integration
    this.sock.ev.on('messages.upsert', async ({ messages }) => {
      for (const msg of messages) {
        try {
          // Handle anti-delete for every message
          // await handleAntiDelete(this.sock, msg);
          // this.messageCount++;
          
          // Log message processing for debugging
          if (msg.message && !msg.key.fromMe) {
            const chatId = msg.key.remoteJid;
            const messageType = Object.keys(msg.message)[0];
            logger.debug(`📨 Message processed: ${messageType} from ${chatId}`);
          }
          
        } catch (error) {
          logger.error('Error processing message for anti-delete:', error);
        }
      }
    });

    // Group updates (optional - for group management)
    this.sock.ev.on('groups.update', (updates) => {
      logger.debug('Group updates:', updates.length);
    });

    // Presence updates (optional)
    this.sock.ev.on('presence.update', (update) => {
      logger.debug(`Presence update for ${update.id}: ${update.presences?.[update.id]?.lastKnownPresence}`);
    });
  }

  async handleDisconnection(lastDisconnect) {
    const code = lastDisconnect?.error?.output?.statusCode || 
                lastDisconnect?.error?.output?.payload?.statusCode;
    
    logger.warn(`Connection closed (Code: ${code || "unknown"})`);

    // Handle different disconnect reasons
    switch (code) {
      case DisconnectReason.loggedOut:
        logger.error("Session logged out. Please update WHATSAPP_SESSION.");
        return;
      case DisconnectReason.restartRequired:
        logger.info("Restart required, reconnecting...");
        break;
      case DisconnectReason.connectionLost:
        logger.info("Connection lost, attempting to reconnect...");
        break;
      default:
        logger.info("Unexpected disconnect, retrying...");
    }

    await this.handleRetry();
  }

  async handleSuccessfulConnection() {
    this.retryCount = 0;
    const user = this.sock.user;
    logger.info(`✅ Connected as ${user?.id || "unknown"}`);

    try {
      await this.sendConnectionNotification(user.id);
    } catch (err) {
      logger.error("Failed to send connection notification:", err);
    }
  }

  async sendConnectionNotification(userId) {
    const antiDeleteStatus = process.env.ANTI_DELETE_ENABLED === 'true' ? '✅ Enabled' : '❌ Disabled';
    
    const message = `
╔══════════════════════════════╗
║    *ERNEST TECH HOUSE BOT*   ║
╠══════════════════════════════╣
║ Status: Connected            ║
║ Version: ${config.BOT_VERSION.padEnd(15)}║
║ Anti-Delete: ${antiDeleteStatus.padEnd(11)}║
║                              ║
║ ✅ Message Storage Active    ║
║ 🕒 30min Auto-Cleanup        ║
║ 🔐 Session Authenticated     ║
╚══════════════════════════════╝

🚀 Bot is ready for commands!
📝 Use ${process.env.PREFIX || '.'}help for command list
    `.trim();

    await this.sock.sendMessage(userId, { text: message });
  }

  async handleRetry() {
    if (this.retryCount < config.MAX_RETRIES) {
      this.retryCount++;
      logger.info(`Retrying connection (${this.retryCount}/${config.MAX_RETRIES})...`);
      setTimeout(() => this.start(), config.RETRY_DELAY);
    } else {
      logger.error("Max retries reached. Shutting down.");
      process.exit(1);
    }
  }

  // async cleanup() {
  //   logger.info("🧹 Starting cleanup process...");
    
  //   try {
  //     // // Cleanup message storage
  //     // if (messageStorage) {
  //     //   messageStorage.destroy();
  //     //   logger.info("✅ Message storage cleaned up");
  //     // }
      
  //     // Close WhatsApp connection
  //     if (this.sock) {
  //       await this.sock.end();
  //       this.sock.ev.removeAllListeners();
  //       logger.info("✅ WhatsApp connection closed");
  //     }
      
  //     // Close Express server
  //     if (this.app) {
  //       // Note: Express server doesn't have a direct close method
  //       // In production, you might want to keep a reference to the server
  //       logger.info("✅ Express server cleanup initiated");
  //     }
      
  //   } catch (err) {
  //     logger.error("❌ Cleanup error:", err);
  //   }
    
  //   logger.info("🏁 Cleanup completed");
  // }

  // Get bot statistics
  getStats() {
    return {
      uptime: Date.now() - this.startTime,
      messagesProcessed: this.messageCount,
      connected: !!this.sock,
      antiDeleteEnabled: process.env.ANTI_DELETE_ENABLED === 'true',
      retryCount: this.retryCount
    };
  }
}

// Process handlers for graceful shutdown
process.on("SIGINT", async () => {
  logger.info("📨 Received SIGINT signal");
  await bot.cleanup();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  logger.info("📨 Received SIGTERM signal");
  await bot.cleanup();
  process.exit(0);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  logger.error('💥 Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('💥 Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Start the bot
const bot = new WhatsAppBot();

// Add a startup delay to ensure everything is properly initialized
setTimeout(() => {
  bot.start().catch(err => {
    logger.error("💥 Fatal startup error:", err);
    process.exit(1);
  });
}, 1000);

// Export bot instance for potential external use
export default bot;